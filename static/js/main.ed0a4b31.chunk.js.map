{"version":3,"sources":["Die.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["Die","className","this","props","dicenum","num","shaking","Component","defaultProps","RollDice","state","num1","num2","rolling","roll","bind","setState","Math","floor","random","setTimeout","style","onClick","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAGMA,G,uLAYE,OACI,0BAAMC,UAAS,UAAKC,KAAKC,MAAMC,QAAQF,KAAKC,MAAME,KAAnC,YAA2CH,KAAKC,MAAMG,QAAS,UAAW,U,GAbnFC,cAAZP,EACKQ,aAAe,CAClBJ,QAAU,CACN,iBACA,iBACA,mBACA,kBACA,kBACA,mBAUGJ,QCsBAS,G,kBAtCX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,KAAM,EACNC,KAAM,EACNC,SAAS,GAEb,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBAPE,E,oEASX,IAAD,OACFb,KAAKc,SAAS,CACVL,KAAMM,KAAKC,MAAsB,EAAhBD,KAAKE,UACtBP,KAAMK,KAAKC,MAAsB,EAAhBD,KAAKE,UACtBN,SAAS,IAEbO,YAAW,WACP,EAAKJ,SAAS,CAACH,SAAS,MACzB,O,+BAIH,OACI,yBAAKZ,UAAU,YACX,yBAAKoB,MAAO,CAAC,UAAa,WACtB,kBAAC,EAAD,CAAKhB,IAAKH,KAAKQ,MAAMC,KAAML,QAASJ,KAAKQ,MAAMG,UAC/C,kBAAC,EAAD,CAAKR,IAAKH,KAAKQ,MAAME,KAAMN,QAASJ,KAAKQ,MAAMG,WAEnD,4BAAQS,QAASpB,KAAKY,KAClBS,SAAUrB,KAAKQ,MAAMG,UACG,IAAvBX,KAAKQ,MAAMG,QAAkB,aAC3B,mB,GA/BAN,c,MCQRiB,MARf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,QCKcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ed0a4b31.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Die.css';\r\n\r\nclass Die extends Component {\r\n    static defaultProps = {\r\n        dicenum : [\r\n            \"fa fa-dice-one\",\r\n            \"fa fa-dice-two\",\r\n            \"fa fa-dice-three\",\r\n            \"fa fa-dice-four\", \r\n            \"fa fa-dice-five\", \r\n            \"fa fa-dice-six\"\r\n          ]\r\n    }\r\n    render(){\r\n        return(\r\n            <span className={`${this.props.dicenum[this.props.num]} ${this.props.shaking? 'shaking': ''}`}></span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Die;","import React, { Component } from 'react';\r\nimport Die from './Die';\r\nimport './RollDice.css';\r\n\r\nclass RollDice extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            num1: 0,\r\n            num2: 0,\r\n            rolling: false\r\n        }\r\n        this.roll = this.roll.bind(this);\r\n    }\r\n    roll(){\r\n        this.setState({\r\n            num1: Math.floor(Math.random() * 6),\r\n            num2: Math.floor(Math.random() * 6),\r\n            rolling: true\r\n        })\r\n        setTimeout(() => {\r\n            this.setState({rolling: false})\r\n        }, 1000);\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"RollDice\">\r\n                <div style={{\"textAlign\": \"center\"}}>\r\n                    <Die num={this.state.num1} shaking={this.state.rolling} />\r\n                    <Die num={this.state.num2} shaking={this.state.rolling} />\r\n                </div>\r\n                <button onClick={this.roll} \r\n                    disabled={this.state.rolling}>\r\n                    {this.state.rolling === true? 'Rolling...'\r\n                     : 'Roll Dice!'}\r\n                </button>   \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default RollDice;","import React from 'react';\nimport RollDice from './RollDice';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RollDice />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}